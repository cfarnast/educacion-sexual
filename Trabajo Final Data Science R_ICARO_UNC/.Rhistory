install.packages("Orange")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(Orange)
library(orange)
install.packages("nlme")
install:packages("orange")
install.packages("orange")
data("Orange")
force(Orange)
view(orange)
view("Orange")
head(Orange)
View(Orange)
View(Orange)
Orange %>%
ggplot(aes(y=circumference,
x=age)) + geom_line()
Orange %>%
ggplot(aes(y=circumference,
x=age)) + geom_point()
lm(circumference~age, data = 'Orange')
lm(circumference ~ age, data = Orange)
Orange %>%
ggplot(aes(y=circumference,
x=age)) + geom_point() + geom_abline(intercept=17.3997,
slope= 0.1068)
Orange %>%
ggplot(aes(y=circumference,
x=age)) + geom_point() + geom_abline(intercept=17.3997,
slope= 0.1068,
col="red")
# cargando libreria de analisis de datos
library(tidyverse)
# cargando datos
data(cars)
force(cars)
head(cars)
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point(intercept=0,
scope=1,
col='blue')
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()+geom_line(intercept=0,
scope=1,
col='blue')
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()+geom_abline(intercept=0,
scope=1,
col='blue')
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()+geom_abline(intercept=0,
scope=10,
col='blue')
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()+geom_abline(intercept=5,
scope=10,
col='blue')
# explorando grafica
cars %>%
ggplot(aes(y=speed,
x=dist)) + geom_point()+geom_abline(intercept=5,
scope=100,
col='blue')
x=speed)+geom_point()
cars %>%
ggplot(aes(y=dist,
x=speed)+geom_point()
x=speed)+geom_point()
# explorando grafica
cars %>%
ggplot(aes(y=dist,
x=speed))+geom_point()
source('C:/Users/Christian/Desktop/udemy_modelos_codigo/sec02_regresion.R', echo=TRUE)
+geom_boxplot()
# exploracion - mirando outliers
cars %>%
ggplot(aes(x=dist))+geom_boxplot()
cor(cars$speed, cars$dist)
# creando el modelo
lm(dist ~ speed, data=cars)
# mirando resultado
cars %>%
ggplot(aes(y=dist,
x=speed))+geom_point() + geom_abline(intercept = -17.579,
slope = 3.932,
col='red')
linea<-100*3.932 - 17.579
print(linea)
# creando el modelo
lm(dist ~ speed, data=cars) <- lineal
# creando el modelo
lineal<-lm(dist ~ speed, data=cars)
summary(lineal)
predict(lineal)
df_pred <- cbind(cars, fit=predict(lineal))
View(df_pred)
View(df_pred)
df_pred %>%
ggplot(aes(y=dist,
x=speed)) + geom_point() + geom_line(aes(y=fit), col = 'red')
summary(df_pred)
pred_int <- predict(lineal,
interval = 'predict',
level = 0.9)
df_int <-cbind(cars, pred_int)
View(df_pred)
View(df_pred)
View(df_int)
View(df_int)
df_int %>%
ggplot(aes(y=dist,
x=speed)) + geom_point +
geom_line(aes(y=fit), col = 'blue')
geom_line(aes(y=lwr), col='red')+
geom_line(aes(y=upr),col='red')
df_int %>%
ggplot(aes(y=dist,
x=speed)) + geom_point()+
geom_line(aes(y=fit), col = 'blue')
geom_line(aes(y=lwr), col='red')+
geom_line(aes(y=upr),col='red')
df_int %>%
ggplot(aes(y=dist,
x=speed)) + geom_point()+
geom_line(aes(y=fit), col = 'blue')+
geom_line(aes(y=lwr), col='red')+
geom_line(aes(y=upr),col='red')
# validando el modelo
summary(lineal)
# validando el modelo
resumen<-summary(lineal)
View(resumen)
View(resumen)
# r-cuadrado
resumen$r.squared
# residuos
hist(resumen$residuals)
# p-valor
resumen$coefficients
summary(lineal)
install.packages('titanic')
library(tidyverse)
library(titanic)
data("titanic_train")
head(titanic_train)
titanic_train %>%
ggplot(aes(x = factor(Survived),
fill = factor(Survived))) +
geom_bar()
titanic_train %>%
group_by(Survived) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo))
titanic_train %>%
ggplot(aes(x = factor(Sex),
fill = factor(Survived))) +
geom_bar(position = 'stack', stat = 'count')
# geom_bar(position = 'fill', stat = 'count')
titanic_pred %>%
group_by(factor(Survived), pred_arbol) %>%
summarise(conteo = n()) %>%
spread(key = pred_arbol,
value = conteo)
cadena <- c("Hola", "Mundo", "Estoy", "Aprendiendo", "R")
print(cadena)
#Si deseamos agregar un elemento adicional a un vector ya existente...
x <- c(2,3,4,5)
x <- c(x,6,7,8,9)
print(x)
## Para obtener informacion sobre una funcion
help("mean")
?mean
install.packages('nycflights13')
library(nycflights13)
library(tidyverse)
flights
flights
View(flights)
data("marketing", package = "datarium")
str(marketing)
x <-5
type(x)
class(x)
typeof(x)
x <-5L
class(x)
typeof(x)
class(y)
y<- 5.5
y<- 5.5
class(y)
typeof(y)
y<- 5.5L
class(y)
typeof(y)
x <-5L
class(x)
typeof(x)
vector1<- c(1,2,3,4,5,6,7,8,9,10)
matriz1<- matrix(vector1, nrow=2)
matriz1
matriz1<- matrix(vector1, ncol=2)
matriz1
vector1<- c(1,2,3,4,5,6,7,8,9,10)
vector1<- c(1,2,3,4,5,6,7,8,9,10)
vector1[3]
vector1[2:5]
vector1>3
vector2 <- c(vector1>3)
vector2
vector3 <- vector1(vector1>3)
vector1<- c(1,2,3,4,5,6,7,8,9,10)
vector3 <- vector1(vector1>3)
vector3 <- vector1[vector1>5]
vector3
vector1<- c(1,2,3,4,5,6,7,8,9,10)
matriz1<- matrix(vector1, nrow=1)
matriz1
vector3
vector1<- c(1,2,3,4,5,6,7,8,9,10)
matriz1<- matrix(vector1, nrow=2)
matriz1
matriz1 <- t(matriz1)
matriz1
x <- seq(1:15, by=2)
x <- seq(1,15, by=2)
x <- seq(1,15, by=2)
x
x <- seq(1,10, by=2)
y <- seq(11,20, by=2)
z <- seq(21,30, by=2)
matrizxyz <- cbind(x,y,z)
matrizxyz
matrizxyz <- rbind(x,y,z)
matrizxyz
matriz1<- matrix(vector1, nrow=2)
matriz1
matriz1+3
matriz1-2
matriz1*matriz1
matriz1/2
matriz1
matriz2<-matrix(1:10, nrow = 2)
matriz2
matriz1%*%matriz2
matriz2<-matrix(11:20, nrow = 2)
matriz2
matriz1%*%matriz2
matriz2<-matrix(11:20, ncol = 2)
matriz2
matriz1%*%matriz2
matriz1
matriz2
matriz1%*%matriz2
EuStockMarkets
head(EuStockMarkets)
data("marketing", package = "datarium")
str(marketing)
data("marketing")
ventas <- c(120,140,90)
meses <- ('enero', 'febrero', 'marzo')
meses <- ('enero', 'febrero', 'marzo')
meses <- ('enero','febrero','marzo')
meses <- ('enero''febrero','marzo')
meses <- ('enero','febrero','marzo')
mes<- ('enero','febrero','marzo')
meses <- c('enero', 'febrero','marzo')
meses <- c('enero', 'febrero','marzo')
ventas
meses
colnames(ventas) <- meses
colnames(ventas) <- meses
ventas <- colnames(meses)
ventas
colnames(ventas) <- c('enero', 'febrero', 'marzo')
meses <- c('enero', 'febrero', 'marzo')
colnames(ventas) <- meses
colnames(ventas) <- meses
colNames(ventas) <- meses
matriz <- matrix(meses, ventas)
colnames(ventas, do.NULL = TRUE, prefix = 'enero', 'febrero', 'marzo')
colnames(ventas, do.NULL = TRUE, prefix = 'col')
colnames(ventas) <- 'enero', 'febrero', 'marzo'
colnames(ventas) <- enero, febrero, marzo
names(ventas) <- meses
ventas <- c(120,140,90)
ventas
meses <- c('enero', 'febrero', 'marzo')
#poner los meses con las correspondientes ventas
names(ventas) <- meses
ventas
mean(ventas)
ventas_mayores_100 <- (ventas > 100)
ventas_mayores_100
ventas(ventas>100)
ventas(max(ventas_mayores_100))
ventas(max(ventas_mayores_100))
ventas_mayores_100(max(ventas>100))
max(ventas)
ventas
max(ventas(ventas_mayores_100))
max(ventas_mayores_100)
max(ventas_mayores_100)
max[ventas(ventas_mayores_100)]
ventas[ventas_mayores_100]
ventas[ventas_mayores_100>100]
ventas[ventas_mayores_100 > 100]
ventas[max(ventas_mayores_100)]
ventas[max(ventas)]
ventas_mayores_100[max(ventas)]
ventas_mayores_100
ventas_mayores_100[max(ventas_mayores_100)]
venta_max <- ventas == max(ventas)
venta_max
venta_max[ventas]
ventas[venta_max]
##########################################################
vector1 <- c(
##########################################################
vector1 <-
vector2<- c(2,8,25,14)
matriz <- matrix(vector1,vector2)
vector1 <-c(4,10,5,3)
vector2<- c(2,8,25,14)
matriz <- matrix(vector1,vector2)
matriz
vector3 <- vector1+vector2
vector3
vector3 <-c(vector1+vector2)
vector3
vector3 <-c(vector1,vector2)
vector3
matriz1 <- matrix(vector3, nrow=2)
matriz1
matriz3 <- matrix(1:24, nrow = 6)
matriz3
matriz4 <- matrix(matriz3, c(3, ), c(,2))
matriz4 <- matrix(matriz3, c(3,2))
matriz4
matriz4 <- matrix(matriz3, c(3,))
matriz4 <- matrix(matriz3, c(3, ))
matriz4 <- matrix(matriz3, c(1:3), c(1:2))
matriz4 <- matrix(matriz3, c(1:3),matriz))
matriz4 <- matrix(matriz3, c(1:3),c(1:2))
matriz4
matriz4 <- matrix(matriz3, [1:3], [1:2])
matriz4 <- matrix(matriz3, [3,], [,2])
sort(vector1)
vector1 <-c(4,10,5,3)
sort(vector1)
state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa", "qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas",
"sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
"sa",  "act", "nsw", "vic", "vic", "act")
stateFactor <- as.factor(state) ## Define los factores (valores nominales) del vector estado
levels(stateFactor) ## Retorna los niveles (valores nominales) del factor
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
tapply(incomes, stateFactor, mean)
m <- matrix(c(1,2,3,4), nrow=2, ncol=2) ## Crea una matriz a partir del vector dad con las dimensiones definidas.
m
m <- matrix(c(1,2,3,4), nrow=2, ncol=2, dimnames = list(c("j", "k"), c("l","m")))
m
print(m)
#Cargamos la base de datos y escalamos los datos para q sean mas precisos
arrestos<-scale(USArrests)
head(arrestos,n=3)
library(ggplot2)
library(factoextra)
library(factoextra)
#con esta funcion graficamos para determinar el nro de cluster
fviz_nbclust(arrestos, kmeans, method="wss")
#especificamos una semilla
set.seed(123)
#aplicamos el algortimo de k-medias
kmediasarrestos<-kmeans(arrestos,4, nstart = 25)
#agregamos a los datos los cluster
cluster <- cbind(USArrests, cluster = kmediasarrestos$cluster)
head(cluster)
#hacemos verificaciones con los datos
kmediasarrestos$centers
kmediasarrestos$size
kmediasarrestos$cluster
fviz_cluster(kmediasarrestos, data = arrestos,
palette = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
ellipse.type = "euclid", # Elipses de concentracion
star.plot = TRUE, # Coloca lineas desde los centrides a los items
repel = TRUE, # Evita la sobre impresion de etiquetas
ggtheme = theme_minimal())
#Cargamos la base de datos y escalamos los datos para q sean mas precisos
arrestos<-scale(USArrests)
View(arrestos)
View(arrestos)
fviz_nbclust(arrestos, kmeans, method="wss")
ggplotly(ggplot(edsex, aes(x= num_hijos, fill = enpar.f)) +
geom_bar(color='black',show.legend = T))
#relacion hijos con edad
ggplotly(ggplot(edsex, aes(x= num_hijos, fill = edad.f)) +
geom_bar(color='black',show.legend = T))
setwd("C:/Users/Christian/Desktop/curso R icaro_UNC/trabajo final del curso")
setwd("C:/Users/Christian/Desktop/CURSOS/curso R icaro_UNC/trabajo final del curso")
library(ggplot2)
library(readxl)
Educacion_Sexual <- read_excel("Educacion Sexual.xlsx")
edsex<-Educacion_Sexual
View(edsex)
ggplot(edsex, aes(x= num_hijos, fill = bajose.f)) +
geom_bar(show.legend = T) +
labs(x='Número de hijos',
title='Gráfico 4: Relación del número de hijos y condición socioeconómica',
subtitle = 'ICARO - Introducción a Data Science con R. Prof: Layla Scheli',
caption = 'Alumno: Christian Farnast Contardo')
ggplot(edsex, aes(x= edad, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)
anios.f <- as.factor(edsex$anios_educ)
numhijos.f <- as.factor(edsex$num_hijos)
con_socioecon <- as.factor(edsex$bajo_socioecon)
pareja <- as.factor(edsex$en_pareja)
ggplot(edsex, aes(x= edad, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)
ggplot(edsex, aes(x= anios_educ, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)
#Grafico 7: relacion de la edad con relacion de pareja
ggplot(edsex, aes(x= edad, fill = pareja)) +
geom_bar(color='black',show.legend = T)+
labs(x='Edad',
title='Relacion de la edad con relaciones de pareja',
subtitle = 'ICARO - Intro a Data Science con R',
caption = 'Christian Farnast Contardo')
ggplot(edsex, aes(x= anios_educ, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)+
labs(x='Edad',
title='Relacion de escolaridad con condición socioeconómica',
subtitle = 'ICARO - Intro a Data Science con R. Prof: Layla Scheli',
caption = 'Christian Farnast Contardo')
ggplot(edsex, aes(x= edad, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)
ggplot(edsex, aes(x= edad, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)+
labs(x='Edad',
title='Gráfico 4: Relación de la edad y condición socioeconómica',
subtitle = 'ICARO - Introducción a Data Science con R. Prof: Layla Scheli',
caption = 'Alumno: Christian Farnast Contardo')
#Grafico 6: relacion de la escolaridad con la condicion socioeconomica
ggplot(edsex, aes(x= anios_educ, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)+
labs(x='Años de escolaridad',
title='Grafico 6: Relación de escolaridad con condición socioeconómica',
subtitle = 'ICARO - Intro a Data Science con R. Prof: Layla Scheli',
caption = 'Christian Farnast Contardo')
###5. analisis grafico de los datos
#Grafico 1: relacion de la edad con los años de educacion
ggplot(edsex, aes(x= edad, fill = anios.f)) +
geom_bar(color='black',show.legend = T) +
labs(x='Edad',
title='Gráfico 1: Relacion de la edad con años de escolaridad',
subtitle = 'ICARO - Introducción a Data Science con R. Prof: Layla Scheli',
caption = 'Alumno: Christian Farnast Contardo')
#Grafico 5: relacion de la edad con la condicion socio economica
ggplot(edsex, aes(x= edad, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)+
labs(x='Edad',
title='Gráfico 5: Relación de la edad y condición socioeconómica',
subtitle = 'ICARO - Introducción a Data Science con R. Prof: Layla Scheli',
caption = 'Alumno: Christian Farnast Contardo')
ggplot(edsex, aes(x= anios_educ, fill = con_socioecon)) +
geom_bar(color='black',show.legend = T)+
labs(x='Años de escolaridad',
title='Grafico 6: Relación de escolaridad con condición socioeconómica',
subtitle = 'ICARO - Intro a Data Science con R. Prof: Layla Scheli',
caption = 'Christian Farnast Contardo')
#Grafico 7: relacion de la edad con relacion de pareja
ggplot(edsex, aes(x= edad, fill = pareja)) +
geom_bar(color='black',show.legend = T)+
labs(x='Edad',
title='Gráfico 7: Relacion de la edad con relaciones de pareja',
subtitle = 'ICARO - Intro a Data Science con R. Prof: Layla Scheli',
caption = 'Christian Farnast Contardo')
library(maps)
install.packages("maps")
library(maps)
View(maps)
library(maps)
View(maps)
library(maps)
maps
View(maps)
library(maps)
map("world")
map("chile")
map("Chile")
map("chile")
map("chile")
map('world', 'chile')
