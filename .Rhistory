iris.v[ pred < 0.5, pred_final := 0]
iris.v
tbl <- table(iris.v$pred_final,iris.v$Species)
tbl
tbl <- unlist(table(iris.v$pred_final,iris.v$Species))
tbl
tbl <- list(table(iris.v$pred_final,iris.v$Species))
tbl
#precision del modelo
iris:v$Species <- factor(iris.v$Species, levels = c('versicolor', 'virginica'))
#precision del modelo
iris.v$Species <- factor(iris.v$Species, levels = c('versicolor', 'virginica'))
tbl <- (table(iris.v$pred_final,iris.v$Species))
tbl
precision <- (tbl[1,1]+tbl[2,1])/sum(tbl)
precision
precision <- (tbl[1,1]+tbl[2,2])/sum(tbl)
precision
tbl[2,2]
tbl[1,1]
roc <- roc(iris.v$pred_final, iris.v$Species)
roc <- roc(iris.v$pred, iris.v$Species)
plot(roc)
roc <- roc(iris.v$Species, iris.v$pred)
plot(roc)
cortes <- data.table(corte = round(roc$thresholds, 2),
Sensividad = roc$sensitivities,
Especificidad = roc$specificities)
cortes
set.seed(123)
plot(iris.hc)
library(ggplot2)
library(data.table)
irisDT <- as.data.table(iris)
#vamos a sacar la variable Species
iris.all <- irisDT[, !'Species']
set.seed(123)
iris.dist <- dist(iris.all, method = 'euclidean')
iris.hc <- hclust(iris.dist, method = 'complete')
plot(iris.hc)
cluster <- cutree(iris.hc, k = 5)
iris.all[predicciones := cluster]
iris.all[, predicciones := cluster]
iris.all
tbl <- table(irisDT$Species, iris.all$predicciones)
tbl
cluster <- cutree(iris.hc, k = 3)
iris.all[, predicciones := cluster]
iris.all
tbl <- table(irisDT$Species, iris.all$predicciones)
tbl
#Hierarchical clustering o clustering de jerarquia
library(data.table)
library(ggplot2)
# 1. pasar a data table
irisDT <- as.data.table(iris)
# 2. analisis exploratorio de los datos
ggplot(irisDT, aes(x=Sepal.Length, y=Sepal.Width, color = Species))+
geom_point()
ggplot(irisDT, aes(x=Petal.Length, y=Petal.Width, color = Species))+
geom_point()
#3. utilizacion del dataset irisDT para preparacion de clusters
# 3.1. quitar la variable Species (es lo que se quiere saber para clasificar)
iris.all <- irisDT[,!'Species']
# 3.2 reproduccion de resultados
set.seed(123)
# 4. creacion de los clusters
# 4.1. distancia de los puntos y de los clusters
iris.dist <- dist(iris.all, method = 'euclidean')
iris.hc <- hclust(iris.dist, method = 'complete')
# 4.2 ploteando un dendograma
plot(iris.hc)
# 4.3 cortando el arbol con k = 3
cluster <- cutree(iris.hc, k = 3)
# 4.4 asignando los resultados a iris.all
iris.all[, Cluster := cluster]
iris.all[, cluster := NULL]
iris.all[, Species := irisDT$Species]
# 5. graficando los resultados
ggplot(iris.all, aes(x=Sepal.Length, y=Sepal.Width, color = factor(Cluster)))+
geom_point()
ggplot(iris.all, aes(x=Petal.Length, y=Petal.Width, color = factor(Cluster)))+
geom_point()
# 6. midiendo los resultados de los clusters
tbl <- table(iris.all$Cluster, irisDT$Species)
tbl
tbl <- table(irisDT$Species, iris.all$predicciones)
tbl
#practica hierarchical clustering
irisDT <- as.data.table(iris)
#llamando librerias
library(ggplot2)
library(data.table)
#vamos a sacar la variable Species
iris.all <- irisDT[, !'Species']
#sacar las distancias y los clusters
set.seed(123)
iris.dist <- dist(iris.all, method = 'euclidean')
iris.hc <- hclust(iris.dist, method = 'complete')
#dendograma
plot(iris.hc)
#podado del arbol
cluster <- cutree(iris.hc, k = 3)
#agregando los clusters
iris.all[, predicciones := cluster]
iris.all
#viendo la precision
tbl <- table(irisDT$Species, iris.all$predicciones)
tbl
library(data.table)
library(ggplot2)
irisDT <- as.data.table(iris)
irisDT
iris.all <- irisDT[, !'Species']
iris.all
set.seed(12345)
iris.dist <- dist(iris.all, method='euclidean')
iris.hc <- hclust(iris.dist, method='complete')
plot(iris.hc)
cluster <- cutree(iris.hc, k = 3)
iris.all[, Cluster:=cluster]
iris.all
tbl <- table(irisDT$Species, iris.all$Cluster)
tbl
tbl <- table(iris.all$Cluster, irisDT$Species)
tbl
irisDT
iris.v <- irisDT[!c('versicolor'),]
iris.v <- irisDT[Species != 'versicolor']
iris.v
cluster <- kmeans(iris.v, centers = 2)
cluster
iris.v[, pred := cluster]
iris.v
cluster <- kmeans(iris.v, centers = 2)
iris.v[, pred := cluster]
iris.v
iris.v[pred := cluster]
iris.v
irisDT <- as.data.table(iris)
# 2. set.seed
set.seed(13245)
# kmeans clustering
iris.all <- irisDT[,!c('Species')]
iris.all
#sacando versicolor
irisDT
iris.all
cluster1 <- kmeans(iris.all, centers = 3)
cluster1
iris.all[, pred := cluster]
iris.all
library(purrr)
kmean$tot.withinss
iris.all
View(iris.all)
View(iris.all)
irisDT
irisDT <- as.data.table(iris)
irisDT
iris.all <- irisDT[, !'Species']
library(purrr)
tot.withinss <- map_dbl(1:10, function(k){
model <-  kmeans(iris.all, centers = k)
model$tot.withinss
})
tot.withinss
codo <-  data.table(k = 1:10,
tot_withinss = tot.withinss)
ggplot(codo, aes(x=k, y=tot_withinss)) +
geom_line() + scale_x_continuous(breaks = 1:10)
cluster <- kmeans(iris.all, centers = 2)
iris.all[, pred := cluster]
iris.all[pred := cluster]
iris.all[, pred := cluster]
iris.all
set.seed(123)
cluster <- kmeans(iris.all, centers = 2)
iris.all[, pred := cluster]
cluster <- kmeans(iris.all, centers = 3)
iris.all[, pred := cluster]
iris.all[, Cluster := cluster]
kmeans$cluster
cluster <- kmeans(iris.all, centers = 3)
cluster$cluster
iris.all[, Cluster := cluster$cluster]
iris.all
tbl <- table(iris.all$Cluster, irisDT$Species)
tbl
set.seed(123)
cluster
#regresion lineal
irisDT
library(data.table)
library(ggplot2)
lm.modelo <- lm(Sepal.Width~., data=irisDT)
lm.modelo
summary(lm.modelo)
lm.modelo$coefficients
lm.modelo <- lm(Sepal.Width~Petal.Length, data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
lm.modelo <- lm(Sepal.Width~Sepal.Length, data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
ggplot(irisDT, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point()
ggplot(lm.modelo, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point()
ggplot(lm.modelo, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
ggplot(lm.modelo, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
geom_abline(intercept = 3.4189468, slope = -0.0618848 )
ggplot(irisDT, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
geom_abline(intercept = 3.4189468, slope = -0.0618848 )
pred <- predict(lm.modelo)
pred
irisDT[, pred := predicciones]
irisDT[pred := predicciones]
irisDT[, pred := predi]
pred <- predict(lm.modelo)
library(data.table)
irisDT[, pred := predi]
irisDT[, pred := 'pred']
irisDT
pred <- predict(lm.modelo)
irisDT[, pred := pred]
irisDT
irisDT[, predict := pred]
irisDT
irisDT[, pred := pred]
irisDT
library(data.table)
#regresion lineal
irisDT <- as.data.table(iris)
library(data.table)
library(ggplot2)
lm.modelo <- lm(Sepal.Width~Sepal.Length, data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
pred <- predict(lm.modelo)
irisDT[, pred := pred]
irisDT
ggplot(irisDT, aes(x=Sepal.Length, y=pred, color = Species)) +
geom_point() +
geom_abline(intercept = 3.4189468, slope = -0.0618848 )
lm.modelo <- lm(Sepal.Width~., data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
pred <- predict(lm.modelo)
irisDT[, pred := pred]
ggplot(irisDT, aes(x=Sepal.Length, y=pred, color = Species)) +
geom_point() +
geom_abline(intercept = 3.4189468, slope = -0.0618848 )
summary(lm.modelo)
lm.modelo$coefficients
pred <- predict(lm.modelo)
pred
irisDT[, pred := pred]
irisDT
ggplot(irisDT, aes(x=Sepal.Length, y=pred, color = Species)) +
geom_point()
lm.modelo <- lm(Petal.Width~., data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
pred <- predict(lm.modelo)
irisDT[, pred := pred]
ggplot(irisDT, aes(x=Petal.Width, y=pred, color = Species)) +
geom_point()
set.seed(123)
lm.modelo <- lm(Petal.Width~., data=irisDT)
summary(lm.modelo)
lm.modelo$coefficients
pred <- predict(lm.modelo)
irisDT[, pred := pred]
ggplot(irisDT, aes(x=Petal.Width, y=pred, color = Species)) +
geom_point() +
geom_abline(intercept = 3.4189468, slope = -0.0618848 )
library(data.table)
library(ggplot2)
irisDT <- as.data.table(iris)
lm.modelo <- lm(Petal.Width - Petal.Length, data = irisDT)
lm.modelo <- lm(Petal.Width ~ Petal.Length, data = irisDT)
lm.modelo$coefficients
predicciones <- predict(lm.modelo)
irisDT[, pred := predicciones]
irisDT
ggplot(data = irisDT, mapping = aes(x=Petal.Length, y = pred, color = Species)) +
geom_point()
lm.modelo$coefficients
ggplot(data = irisDT, mapping = aes(x=Petal.Length, y = pred, color = Species)) +
geom_point() +
geom_abline(intercept = lm.modelo$coefficients[1], slope = lm.modelo$coefficients[2] )
#variable: petal width
set.seed(1233)
lm.modelo <- lm(Petal.Width ~ Petal.Length, data = irisDT)
lm.modelo$coefficients
predicciones <- predict(lm.modelo)
irisDT[, pred := predicciones]
ggplot(data = irisDT, mapping = aes(x=Petal.Length, y = pred, color = Species)) +
geom_point() +
geom_abline(intercept = lm.modelo$coefficients[1], slope = lm.modelo$coefficients[2] )
irisDT
irisDT[, !pred]
irisDT[, pred = NULL ]
irisDT[, !c('pred')]
irisDT
irisDT <- irisDT[, !c('pred')]
irisDT
lm.modelo <- lm(Petal.Width~., data = irisDT)
lm.modelo$coefficients
predicciones <- predict(lm.modelo)
irisDT[, pred := predicciones]
irisDT
predicciones
ggplot(data = irisDT, mapping = aes(x=Petal.Length, y = pred, color = Species)) +
geom_point()
ggplot(data = irisDT, mapping = aes(x=Petal.Length, y = pred, color = Species)) +
geom_point() +
geom_abline(intercept = lm.modelo$coefficients[1], slope = lm.modelo$coefficients[2] )
irisDT
irisDT <- irisDT[, !c('pred')]
irisDT
iris.v <- irisDT[Species != 'versicolor']
iris.v
glm.modelo <- glm(Species ~., data=iris.v, family = binomial)
glm.modelo
glm.modelo$coefficients
pred <- predict(glm.modelo, type = 'response')
pred
iris.v(, pred := pred)
iris.v[, pred := pred]
iris.v
iris.v[ pred >0,5, pred_final :=1]
iris.v[ pred >= 0.5, pred_final :=1]
iris.v[pred < 0.5, pred_final := 0]
iris.v
tbl <-  table(irisDT$Species, iris.v$pred_final)
tbl <-  table(iris.v$Species, iris.v$pred_final)
tbl
iris.v <- factor(iris.v, levels=C('setosa', 'virginica'))
iris.v <- factor(iris.v, levels= c('setosa', 'virginica'))
tbl <-  table(iris.v$Species, iris.v$pred_final)
tbl
iris.v <- factor(iris.v, levels= c('setosa', 'virginica'))
tbl <-  table(iris.v$Species, iris.v$pred_final)
iris.v <- factor(iris.v$Species, levels= c('setosa', 'virginica'))
tbl <-  table(iris.v$Species, iris.v$pred_final)
irisDT
tbl
iris.v$Species <- factor(iris.v$Species, levels= c('setosa', 'virginica'))
iris.v$Species <- factor(iris.v$Species, levels= c('setosa', 'virginica'))
library(pROC)
roc <- roc(iris.v$Species, iris.v$pred_final)
roc <- roc(iris.v$Species, iris.v$pred)
setwd("C:/Users/Christian/Desktop/CURSOS/Cursos RStudio/Proyecto_Sebastopol")
## PROYECTO CURSO INTRODUCCION A R PARA INTELIGENCIA Y ANALISIS DE NEGOCIOS ##
## INSTRUCTOR: CARLOS MARTINEZ, PHD ##
## ENLACE: https://www.udemy.com/course/introduccion-a-r-para-inteligencia-y-analitica-de-negocios/learn/lecture/22597750?start=15#overview
## ALUMNO: Q.F. CHRISTIAN FARNAST CONTARDO
## CARGANDO LIBRERIAS
library(ggplot2)
library(funModeling)
library(tidyverse)
library(corrr)
## CARGANDO DATASET
banco <- read.csv("primerbancodesebastopol.csv", sep = ';')
View(banco)
## ANALISIS DEL DATASET
df_status(banco)
#            variable  q_zeros p_zeros q_na  p_na q_inf p_inf     type unique
# 1                ID       0    0.00    0  0.00     0     0   integer  31634
# 2          Ganancia     222    0.70    0  0.00     0     0   integer   1634
# 3            Online   27780   87.82    0  0.00     0     0   integer      2
# 4     CategoriaEdad       0    0.00 8289 26.20     0     0   integer      7
# 5 CategoriaIngresos       0    0.00 8261 26.11     0     0   integer      9
# 6       Permanencia       0    0.00    0  0.00     0     0   numeric    491
# 7         Municipio       0    0.00    0  0.00     0     0 character      3
summary(banco)
str(banco)
# las variables Online, Categoriaedad, Categoriaingresos y Municipio son de
# tipo numerico y caracter, por lo que para visualizaciones serán convertidas
# a factor
banco$Online <- as.factor(banco$Online)
banco$CategoriaEdad <- as.factor(banco$CategoriaEdad)
banco$CategoriaIngresos <- as.factor(banco$CategoriaIngresos)
banco$Municipio <- as.factor(banco$Municipio)
df_status(banco)
# graficando variables categoricas
freq(banco)
#graficando variables numericas
plot_num(banco)
###############################################################################
## PREGUNTAS GUIA ##
# 1.	Estime la rentabilidad promedio para los clientes con y
#     sin banca en línea. ¿Son diferentes?
#     ¿Es esta diferencia estadísticamente significativa?
# separar los grupos
banco_sin_linea <- banco %>%
filter(Online == 0) %>%
mutate(rent_promedio = sum(Ganancia)/27780)
# RENTABILIDAD PROMEDIO CLIENTES SIN BANCA ONLINE : 110.7862 UNIDADES
banco_linea <- banco %>%
filter(Online == 1) %>%
mutate(rent_promedio = sum(Ganancia)/3854)
# RENTABILIDAD PROMEDIO CLIENTES CON BANCA ONLINE : 116.6668 UNIDADES
# NO HAY UNA DIFERENCIA SIGNIFICATIVA ENTRE LOS DOS GRUPOS EN CUANTO A LA
# RENTABILIDAD PROMEDIO
# 2.	Corra una regresión con Ganancia como variable dependiente y Online y CategoríaEdad
#     como variables independientes.
#     ¿Es el coeficiente Online estadísticamente significativo?
#     ¿Por qué R no utilizó todos los datos disponibles?
#     ¿Hay una diferencia estadísticamente significativa entre las ganancias
#     de los clientes con y sin datos faltantes en CategoríaEdad?
#     Si la hay, ¿puede utilizar sus resultados para sacar conclusiones?
# REGRESION PARA DATOS FALTANTES
regresion <- lm(Ganancia ~ CategoriaEdad + Online , data = banco )
summary(regresion)
# Residuals:
#   Min      1Q  Median      3Q     Max
# -404.52 -162.90  -84.62   68.80 1952.10
#
# Coefficients:
#                 Estimate Std. Error t value Pr(>|t|)
# (Intercept)      -1.802     10.485  -0.172    0.864
# CategoriaEdad2   54.425     11.401   4.774 1.82e-06 ***
# CategoriaEdad3  112.699     11.098  10.155  < 2e-16 ***
# CategoriaEdad4  133.820     11.103  12.053  < 2e-16 ***
# CategoriaEdad5  144.986     11.531  12.574  < 2e-16 ***
# CategoriaEdad6  160.844     11.965  13.443  < 2e-16 ***
# CategoriaEdad7  193.072     11.757  16.422  < 2e-16 ***
# Online1          27.246      5.519   4.937 8.01e-07 ***
#   ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#
# Residual standard error: 277.9 on 23337 degrees of freedom
# (8289 observations deleted due to missingness)
# Multiple R-squared:  0.02494,	Adjusted R-squared:  0.02464
# F-statistic: 85.26 on 7 and 23337 DF,  p-value: < 2.2e-16
## CREAR UNA REGRESION SIN DATOS FALTANTES....CREAR VARIABLE CON EDAD Y SIN EDAD
table(banco$CategoriaEdad)
freq(banco$CategoriaEdad)
banco2 <- banco %>% ifelse(Conedad = CategoriaEdad == 'NA', 0, 1)
banco2 <- banco %>% ifelse(Conedad = CategoriaEdad == NA, 0, 1)
?ifelse
banco2 <- banco %>% ifelse(CategoriaEdad == NA, 0, 1)
banco$CategoriaEdad2 <- ifelse(CategoriaEdad == NA, 0, 1)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad == NA, 0, 1)
View(banco)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad = NA, 0, 1)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad = NA,1,0)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad = 'NA',1,0)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad == 'NA',1,0)
View(banco)
banco$CategoriaEdad2 <- ifelse(banco$CategoriaEdad == 'NA', 0, 1)
View(banco)
banco$CategoriaEdad2[banco$CategoriaEdad2 %in% NA] = 0
View(banco)
df_status(banco$Online)
regresion2 <- lm(Ganancia ~ CategoriaEdad2 + Online, data = banco)
summary(regresion2)
banco <- banco[-CategoriaEdad2]
banco
banco <- banco[-CategoriaEdad2]
banco <- banco %>%
banco <- banco %>%
select(-CategoriaEdad2)
library(tidyverse)
banco <- banco %>%
select(-CategoriaEdad2)
banco
df_status(banco)
banco$conedad <- banco$CategoriaEdad[!is.na(banco$CategoriaEdad == 0)] = 1
banco$conedad <- banco$CategoriaEdad[!is.na(banco$CategoriaEdad == 0)= 1]
banco$conedad[is.na(banco$CategoriaEdad) == 1] = 0
banco$conedad[is.na(banco$CategoriaEdad) == 0] = 1
View(banco)
regresion2 <- lm(Ganancia ~ conedad, data = banco)
summary(regresion2)
freq(banco)
banco$CategoriaEdad[banco$CategoriaEdad %in% NA] = 0
banco$CategoriaEdad[banco$CategoriaEdad %in% 'NA'] = 0
banco$CategoriaEdad[banco$CategoriaEdad %in% c(NA)] = 0
banco$CategoriaEdad[banco$CategoriaEdad %in% ''] = 0
## ASIGNAR VALOR O A LAS VARIABLES FALTANTES DE CATEGORIA EDAD Y CATEGORIA INGRESOS
banco$CategoriaEdad <- as.numeric(banco$CategoriaEdad)
banco$CategoriaEdad[banco$CategoriaEdad %in% NA] = 0
freq(banco$CategoriaEdad)
banco$CategoriaEdad <- as.factor(banco$CategoriaEdad)
freq(banco$CategoriaEdad)
banco$CategoriaIngresos <- as.numeric(banco$CategoriaIngresos)
banco$CategoriaIngresos[banco$CategoriaIngresos %in% NA] = 0
banco$CategoriaIngresos <- as.factor(banco$CategoriaIngresos)
freq(banco$CategoriaIngresos)
regresion3 <- lm(Ganancia + Online + CategoriaEdad, data = banco)
regresion3 <- lm(Ganancia ~ Online + CategoriaEdad, data = banco)
summary(regresion3)
regresion4 <- lm(Ganancia ~ ., data = banco)
summary(regresion4)
regresion4 <- lm(Ganancia ~ Online +CategoriaEdad+CategoriaIngresos, data = banco)
summary(regresion4)
regresion5 <- lm(formula = Ganancia ~ Permanencia +Online + CategoriaEdad + CategoriaIngresos,
data = banco)
summary(regresion5)
regresion6 <- lm(formula = Ganancia ~ Municipio + Permanencia + Online + CategoriaEdad +
CategoriaIngresos, data = banco)
summary(regresion6)
mean(banco$Ganancia)
mean(banco$Ganancia[banco$conedad == 0])
mean(banco$Ganancia[banco$conedad == 1])
